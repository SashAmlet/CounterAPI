// <auto-generated />
using CounterAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CounterAPI.Migrations
{
    [DbContext(typeof(CounterAPIContext))]
    partial class CounterAPIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.3.23174.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CounterAPI.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("English")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonalizationId")
                        .HasColumnType("int");

                    b.Property<string>("Ukranian")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonalizationId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CounterAPI.Models.Personalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Notifications")
                        .HasColumnType("bit");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Personalizations");
                });

            modelBuilder.Entity("CounterAPI.Models.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemplateListId")
                        .HasColumnType("int");

                    b.Property<int>("TemplateSettingsId")
                        .HasColumnType("int");

                    b.Property<int>("TemplateStatisticsId")
                        .HasColumnType("int");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TemplateListId");

                    b.HasIndex("TemplateSettingsId")
                        .IsUnique();

                    b.HasIndex("TemplateStatisticsId")
                        .IsUnique();

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("CounterAPI.Models.TemplateList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TemplateLists");
                });

            modelBuilder.Entity("CounterAPI.Models.TemplateSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Fructions")
                        .HasColumnType("bit");

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<int>("MinValue")
                        .HasColumnType("int");

                    b.Property<int>("NumOfProblems")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TemplateSettings");
                });

            modelBuilder.Entity("CounterAPI.Models.TemplateStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NumOfSolved")
                        .HasColumnType("int");

                    b.Property<int>("NumOfUnsolved")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TemplateStatistics");
                });

            modelBuilder.Entity("CounterAPI.Models.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Dark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonalizationId")
                        .HasColumnType("int");

                    b.Property<string>("White")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonalizationId");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("CounterAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonalizationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonalizationId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CounterAPI.Models.Language", b =>
                {
                    b.HasOne("CounterAPI.Models.Personalization", "Personalization")
                        .WithMany()
                        .HasForeignKey("PersonalizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Personalization");
                });

            modelBuilder.Entity("CounterAPI.Models.Template", b =>
                {
                    b.HasOne("CounterAPI.Models.TemplateList", "TemplateList")
                        .WithMany("Templates")
                        .HasForeignKey("TemplateListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CounterAPI.Models.TemplateSettings", "TemplateSettings")
                        .WithOne("Template")
                        .HasForeignKey("CounterAPI.Models.Template", "TemplateSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CounterAPI.Models.TemplateStatistics", "TemplateStatistics")
                        .WithOne("Template")
                        .HasForeignKey("CounterAPI.Models.Template", "TemplateStatisticsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TemplateList");

                    b.Navigation("TemplateSettings");

                    b.Navigation("TemplateStatistics");
                });

            modelBuilder.Entity("CounterAPI.Models.TemplateList", b =>
                {
                    b.HasOne("CounterAPI.Models.User", "User")
                        .WithMany("TemplateLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CounterAPI.Models.Theme", b =>
                {
                    b.HasOne("CounterAPI.Models.Personalization", "Personalization")
                        .WithMany()
                        .HasForeignKey("PersonalizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Personalization");
                });

            modelBuilder.Entity("CounterAPI.Models.User", b =>
                {
                    b.HasOne("CounterAPI.Models.Personalization", "Personalization")
                        .WithOne("User")
                        .HasForeignKey("CounterAPI.Models.User", "PersonalizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Personalization");
                });

            modelBuilder.Entity("CounterAPI.Models.Personalization", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("CounterAPI.Models.TemplateList", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("CounterAPI.Models.TemplateSettings", b =>
                {
                    b.Navigation("Template");
                });

            modelBuilder.Entity("CounterAPI.Models.TemplateStatistics", b =>
                {
                    b.Navigation("Template");
                });

            modelBuilder.Entity("CounterAPI.Models.User", b =>
                {
                    b.Navigation("TemplateLists");
                });
#pragma warning restore 612, 618
        }
    }
}
